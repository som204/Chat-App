map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {
    listen 80;
    server_name www.codeless.live codeless.live;

    # This location is required for Certbot's renewal challenges.
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    # Redirect all other traffic to the secure HTTPS version.
    location / {
        return 301 https://$host$request_uri;
    }
}

# This is the main server block that handles all secure HTTPS traffic.
server {
    listen 443 ssl http2;
    server_name www.codeless.live codeless.live;

    # === SSL Certificate Configuration from Certbot ===
    # These paths point to the certificates managed by the Certbot container.
    ssl_certificate /etc/letsencrypt/live/www.codeless.live/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.codeless.live/privkey.pem;

    # Add modern SSL/TLS security enhancements
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

  location / {
        # These two headers are required for WebContainers to work.
        add_header Cross-Origin-Opener-Policy same-origin;
        add_header Cross-Origin-Embedder-Policy require-corp;
        add_header Access-Control-Allow-Resource-Policy cross-origin;

        # Forward the request to the frontend service.
        proxy_pass http://frontend:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

  location /api/ {
    resolver 127.0.0.11;
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, DNT, User-Agent, X-Requested-With' always;
    if ($request_method = 'OPTIONS') {
      return 204;
    }

    add_header Cross-Origin-Opener-Policy same-origin;
    add_header Cross-Origin-Embedder-Policy require-corp;
    add_header Access-Control-Allow-Resource-Policy cross-origin;

    proxy_pass http://backend:3000/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location /socket.io/ {
    resolver 127.0.0.11;
    proxy_pass http://backend:3000/socket.io/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cache_bypass $http_upgrade;

    proxy_buffering off;
    proxy_read_timeout 3600;
    proxy_send_timeout 3600;
  }
}
